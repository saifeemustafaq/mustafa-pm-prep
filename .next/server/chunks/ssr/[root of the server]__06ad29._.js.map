{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/mustafasaifee/Downloads/gh/mustafa-pm-prep/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport fs from 'fs';\nimport path from 'path';\nimport { CategoryId } from './constants';\n\nexport async function getQuestionCounts(): Promise<Record<CategoryId, number>> {\n  const contentDir = path.join(process.cwd(), 'src/content');\n  const counts: Partial<Record<CategoryId, number>> = {};\n\n  const files = fs.readdirSync(contentDir);\n  for (const file of files) {\n    if (file.endsWith('.md')) {\n      const category = file.replace('.md', '') as CategoryId;\n      const content = fs.readFileSync(path.join(contentDir, file), 'utf8');\n      const sections = content.split('\\n## ');\n      let questionCount = 0;\n      \n      sections.slice(1).forEach(section => {\n        const questionBlocks = section.split('\\n### ').slice(1);\n        questionCount += questionBlocks.length;\n      });\n\n      counts[category] = questionCount;\n    }\n  }\n\n  return counts as Record<CategoryId, number>;\n}\n\nexport async function getMarkdownContent(category: CategoryId): Promise<string> {\n  const filePath = path.join(process.cwd(), 'src/content', `${category}.md`);\n  return fs.readFileSync(filePath, 'utf8');\n} "],"names":[],"mappings":";;;;;;AAEA;AACA;;;;;;AAGO,eAAe,uCAAe,GAAf;IACpB,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;IAC5C,MAAM,SAA8C,CAAC;IAErD,MAAM,QAAQ,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;IAC7B,KAAK,MAAM,QAAQ,MAAO;QACxB,IAAI,KAAK,QAAQ,CAAC,QAAQ;YACxB,MAAM,WAAW,KAAK,OAAO,CAAC,OAAO;YACrC,MAAM,UAAU,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,YAAY,OAAO;YAC7D,MAAM,WAAW,QAAQ,KAAK,CAAC;YAC/B,IAAI,gBAAgB;YAEpB,SAAS,KAAK,CAAC,GAAG,OAAO,CAAC,CAAA;gBACxB,MAAM,iBAAiB,QAAQ,KAAK,CAAC,UAAU,KAAK,CAAC;gBACrD,iBAAiB,eAAe,MAAM;YACxC;YAEA,MAAM,CAAC,SAAS,GAAG;QACrB;IACF;IAEA,OAAO;AACT;AAEO,eAAe,uCAAgB,GAAhB,mBAAmB,QAAoB;IAC3D,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe,GAAG,SAAS,GAAG,CAAC;IACzE,OAAO,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;AACnC;;;IA3BsB;IAwBA;;AAxBA,+OAAA;AAwBA,+OAAA"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/mustafasaifee/Downloads/gh/mustafa-pm-prep/src/lib/markdown.ts"],"sourcesContent":["import { remark } from 'remark';\nimport html from 'remark-html';\nimport { CategoryId } from './constants';\nimport { getMarkdownContent } from './actions';\n\nexport interface ParsedQuestion {\n  id: string;\n  title: string;\n  content: string;\n  howToAnswer?: string;\n  example?: string;\n  category: string;\n  subcategory: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n}\n\nasync function markdownToHtml(markdown: string) {\n  const result = await remark().use(html).process(markdown);\n  return result.toString();\n}\n\nexport async function getQuestionsFromMarkdown(category: CategoryId): Promise<ParsedQuestion[]> {\n  const fileContent = await getMarkdownContent(category);\n  \n  const questions: ParsedQuestion[] = [];\n  const sections = fileContent.split('\\n## ');\n  \n  const categoryTitle = sections[0].split('\\n')[0].replace('# ', '');\n  \n  for (const section of sections.slice(1)) {\n    const lines = section.split('\\n');\n    const subcategory = lines[0];\n    \n    const questionBlocks = section.split('\\n### ').slice(1);\n    \n    for (const block of questionBlocks) {\n      const parts = block.split('\\n#### ');\n      const title = parts[0].trim();\n      \n      const howToAnswer = parts.find(p => p.startsWith('How to Answer'))?.\n        replace('How to Answer\\n', '').trim();\n      \n      const example = parts.find(p => p.startsWith('Example Answer'))?.\n        replace('Example Answer\\n', '').trim();\n      \n      questions.push({\n        id: `${category}-${subcategory}-${title}`.toLowerCase().replace(/[^a-z0-9]/g, '-'),\n        title,\n        content: title,\n        howToAnswer: howToAnswer ? await markdownToHtml(howToAnswer) : undefined,\n        example: example ? await markdownToHtml(example) : undefined,\n        category: categoryTitle,\n        subcategory,\n      });\n    }\n  }\n  \n  return questions;\n} "],"names":[],"mappings":";;;AAGA;AAHA;AACA;;;;AAeA,eAAe,eAAe,QAAgB;IAC5C,MAAM,SAAS,MAAM,CAAA,GAAA,+HAAA,CAAA,SAAM,AAAD,IAAI,GAAG,CAAC,8IAAA,CAAA,UAAI,EAAE,OAAO,CAAC;IAChD,OAAO,OAAO,QAAQ;AACxB;AAEO,eAAe,yBAAyB,QAAoB;IACjE,MAAM,cAAc,MAAM,CAAA,GAAA,qHAAA,CAAA,qBAAkB,AAAD,EAAE;IAE7C,MAAM,YAA8B,EAAE;IACtC,MAAM,WAAW,YAAY,KAAK,CAAC;IAEnC,MAAM,gBAAgB,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM;IAE/D,KAAK,MAAM,WAAW,SAAS,KAAK,CAAC,GAAI;QACvC,MAAM,QAAQ,QAAQ,KAAK,CAAC;QAC5B,MAAM,cAAc,KAAK,CAAC,EAAE;QAE5B,MAAM,iBAAiB,QAAQ,KAAK,CAAC,UAAU,KAAK,CAAC;QAErD,KAAK,MAAM,SAAS,eAAgB;YAClC,MAAM,QAAQ,MAAM,KAAK,CAAC;YAC1B,MAAM,QAAQ,KAAK,CAAC,EAAE,CAAC,IAAI;YAE3B,MAAM,cAAc,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,UAAU,CAAC,mBAC/C,QAAQ,mBAAmB,IAAI;YAEjC,MAAM,UAAU,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,UAAU,CAAC,oBAC3C,QAAQ,oBAAoB,IAAI;YAElC,UAAU,IAAI,CAAC;gBACb,IAAI,GAAG,SAAS,CAAC,EAAE,YAAY,CAAC,EAAE,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,cAAc;gBAC9E;gBACA,SAAS;gBACT,aAAa,cAAc,MAAM,eAAe,eAAe;gBAC/D,SAAS,UAAU,MAAM,eAAe,WAAW;gBACnD,UAAU;gBACV;YACF;QACF;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///Users/mustafasaifee/Downloads/gh/mustafa-pm-prep/src/components/QuestionList.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/QuestionList.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/QuestionList.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///Users/mustafasaifee/Downloads/gh/mustafa-pm-prep/src/components/QuestionList.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/QuestionList.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/QuestionList.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///Users/mustafasaifee/Downloads/gh/mustafa-pm-prep/src/app/estimation/page.tsx"],"sourcesContent":["import { getQuestionsFromMarkdown } from '@/lib/markdown';\nimport QuestionList from '@/components/QuestionList';\n\nexport const revalidate = 3600;\n\nexport default async function EstimationQuestions() {\n  const questions = await getQuestionsFromMarkdown('estimation');\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Estimation Questions</h1>\n        <p className=\"text-gray-600\">\n          Practice answering questions about market sizing and quantitative analysis.\n        </p>\n      </div>\n\n      <QuestionList questions={questions} category=\"estimation\" />\n    </div>\n  );\n} "],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAEO,MAAM,aAAa;AAEX,eAAe;IAC5B,MAAM,YAAY,MAAM,CAAA,GAAA,sHAAA,CAAA,2BAAwB,AAAD,EAAE;IAEjD,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA0B;;;;;;kCACxC,8OAAC;wBAAE,WAAU;kCAAgB;;;;;;;;;;;;0BAK/B,8OAAC,kIAAA,CAAA,UAAY;gBAAC,WAAW;gBAAW,UAAS;;;;;;;;;;;;AAGnD"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}